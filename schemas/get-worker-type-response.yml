id:       http://schemas.taskcluster.net/aws-provisioner/v1/get-worker-type-response.json#
$schema:  http://json-schema.org/draft-04/schema#
title:                      "Get Worker Type Request"
description: |
  A worker launchSpecification and required metadata
type:                       object
properties:
  workerType:
    type: string
    description: |
      The ID of the workerType
  launchSpecification:
    type: object
    description: |
      AWS LaunchSpecification values shared by all regions and all instance-types.
      This launch spec should not contain either an InstanceType or ImageId.  The
      former should always be a key in the types object and the latter should be
      an overwrite in the regions object
  minCapacity:
    type: number
    description: |
      Minimum number of capacity units to be provisioned.  A capacity unit
      is an abstract unit of capacity, where one capacity unit is roughly
      one task which should be taken off the queue
  maxCapacity:
    type: number
    description: |
      Maximum number of capacity units to be provisioned.
  scalingRatio:
    type: number
    description: |
      A scaling ratio of 1.1 means that we don't start spawning new machines
      until 10% of our capacity is pending.  A scaling ratio of 0.9 means that
      we spawn enough machines that we always have 10% empty capacity.
  minSpotBid:
    type: number
    description: global minimum spot instance bid
  maxSpotBid:
    type: number
    description: global maximum spot instance bid
  canUseOndemand:
    type: boolean
    description: |
      True if this worker type is allowed on demand instances
  canUseSpot:
    type: boolean
    description: |
      True if this worker type is allowed spot instances
  types:
    type: object
    description: |
      This is a dictionary which contains information about the instance types
      which can be used and how to configure each instance type.
#  NOTE: I'm not sure how to do this... I want an object that can have any number
#        of keys, but each of those keys must be an object of this shape
#    properties:
#      type: object
#      description: |
#        Type specific information
#      properties:
#        capacity:
#          type: number
#          description: |
#            This number is a count of the abstract number of Capacity Units this
#            machine can have.  Capacity units are roughly equivalent to the number
#            of pending tasks that this machine can take care of
#        utility:
#          type: number
#          description: |
#            This number is an abstract relative measure of performance.  A machine
#            with a utility factor of 5 will be picked over a machine that has a
#            utility factor of 1 if the price of the more expensive machine is less
#            that 5 times that of the cheaper machine.
#        overwrites:
#          type: object
#          description: |
#            This object contains keys which will overwrite the default AWS Launch
#            Specification with values that are unique to this instance type.
#      required:
#        - capacity
#        - utility
#        - overwrites
#      additionalProperties: false
  regions:
    type: object
    description: |
      This object contains information which is unique to a specific AWS Region.
      Information in this dictionary takes precedence over per-instance-type keys
#    properties:
#      overwrites:
#        type: object
#        description: |
#          This object contains keys which will overwrite keys in the default and
#          instance-type specialized Launch Specifications.
#        properties:
#          ImageId:
#            type: string
#            description: |
#              Because AMI IDs (ImageId in the API Objects) are unique to each region
#              we force this key to be present
#        required:
#          - ImageId
additionalProperties: false
required:
  - workerType
  - launchSpecification
  - maxCapacity
  - scalingRatio
  - minSpotBid
  - maxSpotBid
  - types
  - regions
