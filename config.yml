---

defaults:
  app:
    publishMetaData: !env:bool PUBLISH_METADATA
    iterationInterval: 10
    maxInstanceLife: '- 96 hours'
    id: !env PROVISIONER_ID
    workerTypeTableName: DevWorkerTypes2
    secretTableName: DevWorkerSecrets2
    workerStateTableName: DevWorkerState2
    awsInstancePubkey: !env AWS_INSTANCE_PUBKEY
    awsKeyPrefix: "aws-provisioner-dev-managed:"
    statsComponent: aws-provisioner-dev
    exchangePrefix: "v1/"
    allowedRegions:
      - 'us-west-1'
      - 'us-west-2'
      - 'us-east-1'
      - 'eu-central-1'

    # Key for signing in base.Entity (sufficiently random string required)
    tableSigningKey:          !env TABLE_SIGNING_KEY
    # Key for data encryption in base.Entity (32 random bytes as base64)
    tableCryptoKey:           !env TABLE_CRYPTO_KEY

  taskcluster:
    authBaseUrl: https://auth.taskcluster.net/v1
    queueBaseUrl: https://queue.taskcluster.net/v1
    credentials:
      clientId: !env TASKCLUSTER_CLIENT_ID
      accessToken: !env TASKCLUSTER_ACCESS_TOKEN

  server:
    port: 5557
    publicUrl: localhost:5557
    env: development
    forceSSL: false
    trustProxy: false

  monitor:
    project: 'aws-provisioner-dev'
    mock: true

  azure:
    account: !env AZURE_ACCOUNT_NAME
  azureBlob:
    accountName: !env AZURE_BLOB_ACCOUNT_NAME
    accountKey: !env AZURE_BLOB_ACCOUNT_KEY
  pulse:
    username: !env PULSE_USERNAME
    password: !env PULSE_PASSWORD

  influx:
    connectionString: !env INFLUX_CONNECTION
    maxDelay: 300
    maxPendingPoints: 300

  aws:
    # Credentials with access to artifact buckets and
    # references/schemas.taskcluster.net if you wish to publish meta-data
    accessKeyId: !env AWS_ACCESS_KEY_ID
    secretAccessKey: !env AWS_SECRET_ACCESS_KEY
    region: us-west-2
    apiVersion: 2014-01-01
    maxRetries: 10

  deadmanssnitch:
    api:
      key: !env DEADMANSSNITCH_API_KEY
    iterationSnitch: !env DEADMANSSNITCH_ITERATION_SNITCH
# Configuration in production
production:
  app:
    id: aws-provisioner-v1
    workerTypeTableName: WorkerTypes
    secretTableName: Secrets
    workerStateTableName: WorkerState
    publishMetaData: true
    statsComponent: aws-provisioner-v1
    awsKeyPrefix: "aws-provisioner-v1-managed:"
    iterationInterval: 10
    allowedRegions: !env:list ALLOWED_REGIONS
  monitor:
    project: 'aws-provisioner'
    mock: false
  server:
    publicUrl: https://aws-provisioner.taskcluster.net
    port: !env:number PORT
    env: production
    forceSSL: true
    trustProxy: true

staging:
  app:
    id: staging-aws
    workerTypeTableName: StagingWorkerTypes
    secretTableName: StagingSecrets
    workerStateTableName: StagingWorkerState
    publishMetaData: false
    statsComponent: staging-aws
    awsKeyPrefix: "staging-aws-managed:"
    iterationInterval: 10
    allowedRegions: !env:list ALLOWED_REGIONS
  monitor:
    project: 'staging-aws'
    mock: false
  server:
    publicUrl: https://staging-aws-provisioner.herokuapp.com
    port: !env:number PORT
    env: development
    forceSSL: true
    trustProxy: true

development:
  deadmanssnitch:
    api:
      key: 'nokey'
    iterationSnitch: 'http://httpbin.org/status/200'
  azure:
    account: jungle
  app:
    id: aws-provisioner-dev
    awsInstancePubkey: 'fake-pubkey'
    allowedRegions:
      - 'us-west-1'
      - 'us-west-2'
      - 'us-east-1'
      - 'eu-central-1'

test:
  app:
    id: aws-provisioner-test
    workerTypeTableName: TestWorkerTypes
    secretTableName: TestWorkerSecrets
    workerStateTableName: TestWorkerState
    publishMetaData: false
    statsComponent: aws-provisioner-test
    awsKeyPrefix: "aws-provisioner-test-managed:"
    awsInstancePubkey: 'fake-pubkey'
    allowedRegions:
      - 'us-west-2'
    tableSigningKey:          not-a-secret-so-you-cant-guess-it
    tableCryptoKey:           AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=

  server:
    publicUrl: http://localhost:60407
    port: 60407
  azure:
    account: jungle
  deadmanssnitch:
    api:
      key: 'nokey'
    iterationSnitch: 'http://httpbin.org/status/200'
